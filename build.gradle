plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.owasp.dependencycheck" version "12.1.3"
    id 'jacoco'
    id 'org.sonarqube' version '6.2.0.5505'
}

group = 'com.ecommerce'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
    toolVersion = "0.8.13"
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', '2025.0.0')
}

sourceSets {
    smoke {
        java.srcDir file('src/smoke/java')
        resources.srcDir file('src/smoke/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
	// Application dependencies
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-config-server'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Unit test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Smoke test dependencies
    smokeImplementation 'org.springframework.boot:spring-boot-starter-test'
    smokeImplementation 'org.testcontainers:junit-jupiter'
}

configurations.configureEach {
	resolutionStrategy {
		// ✅ Temporary security override for CVE-2020-36843 (eddsa < 0.3.1)
		// TODO: Remove once spring-cloud-config-server upgrades eddsa to ≥ 0.3.1
		force 'net.i2p.crypto:eddsa:0.3.1'

		// ✅ Temporary security override for CVE-2025-4949 (JGit < 7.2.1)
		// TODO: Remove once spring-cloud-config-server no longer brings in vulnerable JGit (< 7.2.1)
		eachDependency { details ->
			if (details.requested.group == 'org.eclipse.jgit') {
				details.useVersion '7.2.1.202505142326-r'
			}
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencyCheck {
	formats = ['html', 'json']
    outputDirectory = layout.buildDirectory.dir("reports/owasp/${project.name}").get().asFile
    failBuildOnCVSS = 7 // Fail the build if any dependency has a CVSS score of 7 or higher
}

tasks.named('test') {
    description = "Runs unit tests"
    group = "verification"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()

    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/tests/unit/${project.name}"))
    }

    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/${project.name}/test.exec").get().asFile
    }

    finalizedBy tasks.jacocoTestReport
}


tasks.register("smoke", Test) {
    description = "Runs smoke tests"
    group = "verification"
    testClassesDirs = sourceSets.smoke.output.classesDirs
    classpath = sourceSets.smoke.runtimeClasspath
    useJUnitPlatform()

    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/tests/smoke/${project.name}"))
    }

    dependsOn bootJar
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/${project.name}/coverage.xml"))

        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/${project.name}/html"))
    }
    executionData.setFrom(
            layout.buildDirectory.file("jacoco/${project.name}/test.exec")
    )
}

bootJar {
	archiveFileName = 'config-server.jar'
}

sonarqube {
    properties {
        property "sonar.projectKey", "ar-ecommerce-platform_${project.name}"
        property "sonar.organization", "ar-ecommerce-platform"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}